buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath('org.springframework.boot:spring-boot-gradle-plugin:1.3.3.RELEASE')
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'spring-boot'
apply plugin: 'application'

repositories {
    mavenCentral()
}

// tag::xsd[]
//hm. eigentlich brauch ich das nicht weil ich die klassen ja gar nicht
//verwenden will, sondern nur die WSDL-definition-klasse. 
task genJaxb {
    ext.sourcesDir = "${buildDir}/generated-sources/jaxb"
    ext.classesDir = "${buildDir}/classes/jaxb"
    ext.schema = "src/main/resources/schema/countries.xsd"

    outputs.dir classesDir

    doLast() {
        project.ant {
            taskdef name: "xjc", classname: "com.sun.tools.xjc.XJCTask",
                    classpath: configurations.jaxb.asPath
            mkdir(dir: sourcesDir)
            mkdir(dir: classesDir)

            xjc(destdir: sourcesDir, schema: schema) {
                arg(value: "-wsdl")
                produces(dir: sourcesDir, includes: "**/*.java")
            }

            javac(destdir: classesDir, source: 1.6, target: 1.6, debug: true,
                    debugLevel: "lines,vars,source",
                    classpath: configurations.jaxb.asPath) {
                src(path: sourcesDir)
                include(name: "**/*.java")
                include(name: "*.java")
            }

            copy(todir: classesDir) {
                fileset(dir: sourcesDir, erroronmissingdir: false) {
                    exclude(name: "**/*.java")
                }
            }
        }
    }
}
// end::xsd[]

// tag::jaxb[]
configurations {
    jaxb
}


jar {
    baseName = 'workmod-procman'
    version = '0.1.0'
    from genJaxb.classesDir
}

// tag::dependencies[]
sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
	

    compile("org.springframework.boot:spring-boot-starter")
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    compile("org.springframework.boot:spring-boot-starter-data-rest")
    compile("org.springframework.boot:spring-boot-starter-ws")
    compile("wsdl4j:wsdl4j")
    jaxb("com.sun.xml.bind:jaxb-xjc:2.2.4-1")
    compile(files(genJaxb.classesDir).builtBy(genJaxb))
    compile("org.springframework.data:spring-data-rest-hal-browser")
    
    compile('org.activiti:activiti-spring-boot-starter-basic:5.19.0.2')
    
    compile('org.apache.camel:camel-spring-boot:2.16.2')
    compile('org.apache.camel:camel-spring-ws:2.16.2')
    compile('org.apache.camel:camel-spring-javaconfig:2.16.2')
    compile('org.apache.camel:camel-context:2.16.2')
    compile('org.apache.camel:camel-jms:2.16.2')
    compile('org.apache.camel:camel-jpa:2.16.2')
    compile('org.apache.camel:camel-jaxb:2.16.2')
    compile('org.apache.camel:camel-stream:2.16.2')
    compile('org.apache.camel:camel-mail:2.16.2')
    compile('org.apache.activemq:activemq-broker')
    compile('org.springframework:spring-jms')
	compile('com.icegreen:greenmail:1.5.0')
    testCompile("org.springframework.boot:spring-boot-starter-test")
    testCompile('org.apache.camel:camel-test-spring:2.16.2')
    
    compile group: 'com.h2database', name: 'h2', version: '1.+'
    testCompile group: 'junit', name: 'junit', version: '4.+'
}
// end::dependencies[]
// end::jaxb[]

test {
    systemProperties 'property': 'value'
}

uploadArchives {
    repositories {
       flatDir {
           dirs 'repos'
       }
    }
}

//does not work
/*http://stackoverflow.com/questions/26750869/how-to-add-gradle-generated-source-folder-to-eclipse-project
eclipse {
    classpath {
        file.whenMerged { cp ->
            cp.entries.add( new org.gradle.plugins.ide.eclipse.model.SourceFolder('${buildDir}/generated-sources/jaxb', null) )
        }
    }
}
*/
task afterEclipseImport {
	dependsOn "genJaxb"
	doLast {
	    compileJava.execute()
	    def classpath = new XmlParser().parse(file(".classpath"))
	    new Node(classpath, "classpathentry", [kind: 'src', path: 'build/generated-sources/jaxb']);
	    def writer = new FileWriter(file(".classpath"))
	    def printer = new XmlNodePrinter(new PrintWriter(writer))
	    printer.setPreserveWhitespace(true)
	    printer.print(classpath)
	}
}
